<<<<<<< HEAD
rango_valores_min <- list(
list(rango = c(0, 10 * 12), valor_punto = 230),
list(rango = c(11 * 12, 20 * 12), valor_punto = 276),
list(rango = c(21 * 12, 30 * 12), valor_punto = 322),
list(rango = c(31 * 12, 35 * 12), valor_punto = 368),
list(rango = c(36 * 12, 39 * 12), valor_punto = 414),
list(rango = c(40 * 12, Inf), valor_punto = 460)
)
# Función para ajustar la pensión según mínimos
ajustar_pension_min <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension < valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
ajustar_pension_min(9*12, 11, rango_valores_min)
runApp()
ajustar_pension_min(35*12, 600 , rango_valores_min)
runApp()
ajustar_pension_min(35*12, 1087, rango_valores_min)
ajustar_pension_max(35*12, 1087, rango_valores_max)
rango_valores_max <- list(
list(rango = c(0, 10 * 12), valor_punto = 1150),
list(rango = c(15 * 12, 19 * 12), valor_punto = 1380),
list(rango = c(20 * 12, 24 * 12), valor_punto = 1610),
list(rango = c(25 * 12, 29 * 12), valor_punto = 1840),
list(rango = c(30 * 12, 34 * 12), valor_punto = 2070),
list(rango = c(35 * 12, 39 * 12), valor_punto = 2300),
list(rango = c(4 * 120, Inf), valor_punto = 2530)
)
# Función para ajustar la pensión según máximos
ajustar_pension_max <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension > valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
ajustar_pension_max(35*12, 1087, rango_valores_max)
runApp()
runApp()
# FUNCIONES
edad <- 25
=======
>>>>>>> 0a72c69d4dc2f1f55e77f4e74d89002eddea3a20
salario <- 600
anios_aporte<- 35
Pension <- function(edad, salario, anios_aporte){
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
return(list(pension, prom))
}
Pension(edad, salario, anios_aporte)
Coeficiente <- data.frame(An.Imposiciones = c(5:40),
Coef = c(0.4375, 0.4500, 0.4625,0.4750,0.4875, 0.5000, 0.5125, 0.5250, 0.5375, 0.5500, 0.5625, 0.5750, 0.5875, 0.6000, 0.6125, 0.6250,
0.6375, 0.6500, 0.6625, 0.6750, 0.6875, 0.7000, 0.7125, 0.7250, 0.7375, 0.7500, 0.7625, 0.7750, 0.7875, 0.8000, 0.8125, 0.8325,
0.8605, 0.8970, 0.9430, 1.0000))
iente <- data.frame(An.Imposiciones = c(5:40),
Coef = c(0.4375, 0.4500, 0.4625,0.4750,0.4875, 0.5000, 0.5125, 0.5250, 0.5375, 0.5500, 0.5625, 0.5750, 0.5875, 0.6000, 0.6125, 0.6250,
0.6375, 0.6500, 0.6625, 0.6750, 0.6875, 0.7000, 0.7125, 0.7250, 0.7375, 0.7500, 0.7625, 0.7750, 0.7875, 0.8000, 0.8125, 0.8325,
0.8605, 0.8970, 0.9430, 1.0000))
Coeficiente <- data.frame(An.Imposiciones = c(5:40),
Coef = c(0.4375, 0.4500, 0.4625,0.4750,0.4875, 0.5000, 0.5125, 0.5250, 0.5375, 0.5500, 0.5625, 0.5750, 0.5875, 0.6000, 0.6125, 0.6250,
0.6375, 0.6500, 0.6625, 0.6750, 0.6875, 0.7000, 0.7125, 0.7250, 0.7375, 0.7500, 0.7625, 0.7750, 0.7875, 0.8000, 0.8125, 0.8325,
0.8605, 0.8970, 0.9430, 1.0000))
for (i in 41:100) { # Añadir nuevas filas para cuando supera los 40 años de aportes
ultimo_coef <- tail(Coeficiente$Coef, 1)
nuevo_coef <- ultimo_coef + 0.0125
nueva_fila <- data.frame(An.Imposiciones = i, Coef = nuevo_coef)
Coeficiente <- rbind(Coeficiente, nueva_fila)
}
# FUNCION PARA MINIMOS Y MAXIMOS DE PENSIONES
rango_valores_min <- list(
list(rango = c(0, 10 * 12), valor_punto = 230),
list(rango = c(11 * 12, 20 * 12), valor_punto = 276),
list(rango = c(21 * 12, 30 * 12), valor_punto = 322),
list(rango = c(31 * 12, 35 * 12), valor_punto = 368),
list(rango = c(36 * 12, 39 * 12), valor_punto = 414),
list(rango = c(40 * 12, Inf), valor_punto = 460)
)
rango_valores_max <- list(
list(rango = c(0, 10 * 12), valor_punto = 1150),
list(rango = c(15 * 12, 19 * 12), valor_punto = 1380),
list(rango = c(20 * 12, 24 * 12), valor_punto = 1610),
list(rango = c(25 * 12, 29 * 12), valor_punto = 1840),
list(rango = c(30 * 12, 34 * 12), valor_punto = 2070),
list(rango = c(35 * 12, 39 * 12), valor_punto = 2300),
list(rango = c(4 * 120, Inf), valor_punto = 2530)
)
# Función para ajustar la pensión según mínimos
ajustar_pension_min <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension < valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
# Función para ajustar la pensión según máximos
ajustar_pension_max <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension > valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
# FUNCIONES
edad <- 25
salario <- 600
anios_aporte<- 35
Pension <- function(edad, salario, anios_aporte){
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
return(list(pension, prom))
}
Pension(edad, salario, anios_aporte)
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_min)
pension
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
pension
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(pensiones2)
load("C:/Users/MyHP/Desktop/TIC/Shiny-TIC/obtencion_pension_prom.Rdata")
runApp()
240*(1.02154)^30
245*(1.02154)^30
runApp()
mejores_5_salarios <- sapply(1:5, function(i) {
270 * (1 + 0.025339)^(30 - i)
})
mejores_5_salarios
sum(mejores_5_salarios) / 5
mejores_5_salarios <- sapply(1:5, function(i) {
+     260 * (1 + 0.025339)^(30 - i)
+ })
mejores_5_salarios <- sapply(1:5, function(i) {
250 * (1 + 0.025339)^(30 - i)
})
sum(mejores_5_salarios) / 5
mejores_5_salarios <- sapply(1:5, function(i) {
240 * (1 + 0.025339)^(30 - i)
})
sum(mejores_5_salarios) / 5
mejores_5_salarios <- sapply(1:5, function(i) {
230 * (1 + 0.025339)^(30 - i)
})
sum(mejores_5_salarios) / 5
mejores_5_salarios <- sapply(1:5, function(i) {
235 * (1 + 0.025339)^(30 - i)
})
sum(mejores_5_salarios) / 5
runApp()
346.6*(1.018261)^{-30}
runApp()
runApp()
#salario inicial 600
#anio empezo aporte hace 10 anios
# hoy 60
# inicio a aportar hace 35
sal_ini <- 600*(1 + incremento)^(-25)
sal_ini
Pension(25, sal_ini, 35)
715.312 *0.8125
sal_ini
Pension(25, sal_ini, 35)
anios_aporte <- 35
edad<- 25
salario <- sal_ini
anios_aporte <- 35
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
prom
coef
pension <- prom * coef
pension
pension
pension <- ajustar_pension_min(anios_aporte*12, pension, rango_valores_min)
pension
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
pension
Pension(25, sal_ini, 35)
Pension(edad, sal_ini, anios_aporte )
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_min(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
pension
# FUNCIONES
Pension <- function(edad, salario, anios_aporte){
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_min(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
return(list(pension, prom))
}
#salario inicial 600
#anio empezo aporte hace 10 anios
# hoy 60
# inicio a aportar hace 35
sal_ini <- 600*(1 + incremento)^(-25)
Pension(edad, sal_ini, anios_aporte )
edad<- 25
# FUNCIONES
Pension <- function(edad, salario, anios_aporte){
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_min(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
return(list(pension, prom))
}
edad<- 25
salario <- sal_ini
anios_aporte <- 35
Pension(edad, sal_ini, anios_aporte)
581.191 * (1.018261)^(25)
runApp()
Coeficiente <- data.frame(An.Imposiciones = c(5:40),
Coef = c(0.4375, 0.4500, 0.4625,0.4750,0.4875, 0.5000, 0.5125, 0.5250, 0.5375, 0.5500, 0.5625, 0.5750, 0.5875, 0.6000, 0.6125, 0.6250,
0.6375, 0.6500, 0.6625, 0.6750, 0.6875, 0.7000, 0.7125, 0.7250, 0.7375, 0.7500, 0.7625, 0.7750, 0.7875, 0.8000, 0.8125, 0.8325,
0.8605, 0.8970, 0.9430, 1.0000))
for (i in 41:100) { # Añadir nuevas filas para cuando supera los 40 años de aportes
ultimo_coef <- tail(Coeficiente$Coef, 1)
nuevo_coef <- ultimo_coef + 0.0125
nueva_fila <- data.frame(An.Imposiciones = i, Coef = nuevo_coef)
Coeficiente <- rbind(Coeficiente, nueva_fila)
}
# FUNCION PARA MINIMOS Y MAXIMOS DE PENSIONES
rango_valores_min <- list(
list(rango = c(0, 10 * 12), valor_punto = 230),
list(rango = c(11 * 12, 20 * 12), valor_punto = 276),
list(rango = c(21 * 12, 30 * 12), valor_punto = 322),
list(rango = c(31 * 12, 35 * 12), valor_punto = 368),
list(rango = c(36 * 12, 39 * 12), valor_punto = 414),
list(rango = c(40 * 12, Inf), valor_punto = 460)
)
rango_valores_max <- list(
list(rango = c(0, 10 * 12), valor_punto = 1150),
list(rango = c(15 * 12, 19 * 12), valor_punto = 1380),
list(rango = c(20 * 12, 24 * 12), valor_punto = 1610),
list(rango = c(25 * 12, 29 * 12), valor_punto = 1840),
list(rango = c(30 * 12, 34 * 12), valor_punto = 2070),
list(rango = c(35 * 12, 39 * 12), valor_punto = 2300),
list(rango = c(4 * 120, Inf), valor_punto = 2530)
)
# Función para ajustar la pensión según mínimos
ajustar_pension_min <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (!is.na(valor_punto) && !is.na(pension) & rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension < valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
# Función para ajustar la pensión según máximos
ajustar_pension_max <- function(numero_imposiciones, pension, rango_valores) {
for (rango_valor in rango_valores) {
rango <- rango_valor$rango
valor_punto <- rango_valor$valor_punto
if (!is.na(valor_punto) && !is.na(pension) & rango[1] <= numero_imposiciones & numero_imposiciones <= rango[2]) {
if (pension > valor_punto) {
pension <- valor_punto
}
}
}
return(pension)
}
# FUNCIONES
Pension <- function(edad, salario, anios_aporte){
incremento <- 0.025339
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + incremento)^(anios_aporte - i)
})
# pension = promedio * coef
prom <- sum(mejores_5_salarios) / 5
coef <- Coeficiente$Coef[Coeficiente$An.Imposiciones == anios_aporte]
pension <- prom * coef
pension <- ajustar_pension_min(anios_aporte*12, pension, rango_valores_min)
pension <- ajustar_pension_max(anios_aporte*12, pension, rango_valores_max)
return(list(pension, prom))
}
Pension(25, 600*(1.025339 )^(-25), 35)
-2010 +2024- (60-25)
Pension(25, 600*(1.025339 )^(-21), 35)
runApp()
load("C:/Users/MyHP/Desktop/TIC/Shiny-TIC/obtencion_pension_prom.Rdata")
# arreglo base de datos
#establecimiento minimo y maximo de pensiones
pensiones2 <- pensiones2 %>%  mutate( prom_salario_a_usar = promedio_sueldo_real *(1.02154)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=promedio_sueldo_real)
pensiones2 <- pensiones2 %>%  mutate(pension_final1 = pension_final *( 1.018261)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=pension_final)
pensiones2 <- pensiones2 %>% mutate(pensionesfinal2 = pension_final1)
pensiones2 <- pensiones2 %>% dplyr::filter(tipo_seguro != 'SC')
pensiones2 <- pensiones2 %>%
mutate(pensionesfinal2 = case_when(
0 <= numero_imposiciones & numero_imposiciones <= 10 * 12 ~ ifelse(pensionesfinal2 < 230, 230, pensionesfinal2),
11 * 12 <= numero_imposiciones & numero_imposiciones <= 20 * 12 ~ ifelse(pensionesfinal2 < 276, 276, pensionesfinal2),
21 * 12 <= numero_imposiciones & numero_imposiciones <= 30 * 12 ~ ifelse(pensionesfinal2 < 322, 322, pensionesfinal2),
31 * 12 <= numero_imposiciones & numero_imposiciones <= 35 * 12 ~ ifelse(pensionesfinal2 < 368, 368, pensionesfinal2),
36 * 12 <= numero_imposiciones & numero_imposiciones <= 39 * 12 ~ ifelse(pensionesfinal2 < 414, 414, pensionesfinal2),
40 * 12 <= numero_imposiciones ~ ifelse(pensionesfinal2 < 460, 460, pensionesfinal2),
0 <= numero_imposiciones & numero_imposiciones <= 10 * 12 ~ ifelse(pensionesfinal2 > 1150, 1150, pensionesfinal2),
15 * 12 <= numero_imposiciones & numero_imposiciones <= 19 * 12 ~ ifelse(pensionesfinal2 > 1380, 1380, pensionesfinal2),
20 * 12 <= numero_imposiciones & numero_imposiciones <= 24 * 12 ~ ifelse(pensionesfinal2 > 1610, 1610, pensionesfinal2),
25 * 12 <= numero_imposiciones & numero_imposiciones <= 29 * 12 ~ ifelse(pensionesfinal2 > 1840, 1840, pensionesfinal2),
30 * 12 <= numero_imposiciones & numero_imposiciones <= 34 * 12 ~ ifelse(pensionesfinal2 > 2070, 2070, pensionesfinal2),
35 * 12 <= numero_imposiciones & numero_imposiciones <= 39 * 12 ~ ifelse(pensionesfinal2 > 2300, 2300, pensionesfinal2),
4 * 120 <= numero_imposiciones ~ ifelse(pensionesfinal2 > 2530, 2530, pensionesfinal2),
TRUE ~ pensionesfinal2
))
#Función de cálculo de la pensión promedio
pension_promedio_fun <- function(e_j, impo, sexo1, sal_ini, anios_aporte){
crec_salarios <- 0.02154
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]])
#-300, -400
prom <- mean(res$pensionesfinal2)
return(prom)
}
dim(pensiones2$prom_salario_a_usar < 720)
length(pensiones2$prom_salario_a_usar < 720)
load("C:/Users/MyHP/Desktop/TIC/Shiny-TIC/obtencion_pension_prom.Rdata")
pensiones2 <- pensiones2 %>%  mutate( prom_salario_a_usar = promedio_sueldo_real *(1.02154)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=promedio_sueldo_real)
quantile(pensiones2$prom_salario_a_usar)
e_j <- 60
impo <- (60-25)*12
sal_ini <- 100 *(0.02154 +1)^(-21)
anios_aporte <- 60-25
pension_promedio_fun <- function(e_j, impo, sexo1, sal_ini, anios_aporte){
crec_salarios <- 0.02154
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]])
#-300, -400
prom <- mean(res$pensionesfinal2)
return(prom)
}
crec_salarios <- 0.02154
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]])
# Condiciones Mínimas
minimo <- function(edad) {
if (edad + 40 < 60) {
return(edad + 40)
} else {
if (edad + 30 <= 64) {
if (edad + 30 <= 60) {
return(60)
} else {
return(edad + 30)
}
} else {
if (edad + 15 <= 69) {
if (edad + 15 <= 65) {
return(65)
} else {
return(edad + 15)
}
} else {
if (edad + 10 <= 70) {
return(70)
} else {
return(edad + 10)
}
}
}
}
}
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]])
res <- pensiones2 %>%  dplyr::filter(minimo(25) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(25) - 25)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(25, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(25, sal_ini, anios_aporte)[[2]])
res <- pensiones2 %>%  dplyr::filter(minimo(25) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(25) - 25)*12) ) %>%
dplyr::filter(sexo == 'F') %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(25, sal_ini, anios_aporte)[[2]] - 400 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(25, sal_ini, anios_aporte)[[2]])
prom <- mean(res$pensionesfinal2)
prom
res <- pensiones2 %>%  dplyr::filter(minimo(25) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 12 >= numero_imposiciones &  numero_imposiciones >= ((minimo(25) - 25)*12) ) %>%
dplyr::filter(sexo == 'F') %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar))
res
quantile(res)
quantile(res$prom_salario_a_usar)
Pension(25, sal_ini, anios_aporte)[[2]]
Pension(25, sal_ini, anios_aporte)[[2]]
Pension(25, sal_ini, anios_aporte)
sal_ini
runApp()
runApp()
runApp()
runApp()
runApp()
min(pensiones2$prom_salario_a_usar)
min(pensiones2$prom_salario_a_usar[pensiones2$promedio_sueldo_real !=0])
quantile(pensiones2$prom_salario_a_usar, probs = seq(0,1,0.05))
runApp()
35-10
runApp()
runApp()
runApp()
runApp()
git status
shiny::runApp()
<<<<<<< HEAD
=======
runApp()
getwd()
runApp()
list.files()
list.files()
runApp()
runApp()
runApp()
runApp()
runApp()
view(Coeficiente)
length(c(5:40))
36+36
runApp()
view(data.frame(An.Imposiciones = c(5:40),
Coef = c(0.4375, 0.4500, 0.4625,0.4750,0.4875, 0.5000, 0.5125, 0.5250, 0.5375, 0.5500, 0.5625, 0.5750, 0.5875, 0.6000, 0.6125, 0.6250,
0.6375, 0.6500, 0.6625, 0.6750, 0.6875, 0.7000, 0.7125, 0.7250, 0.7375, 0.7500, 0.7625, 0.7750, 0.7875, 0.8000, 0.8125, 0.8325,
0.8605, 0.8970, 0.9430, 1.0000)))
rango_valores_min
view(rango_valores_min)
2.50*460
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
for(i in c(1:10)){
print(i)
}
for(i in c(25:30)){
print(i)
}
runApp()
numeric(5)
integer(5)
c(15:20)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
>>>>>>> 0a72c69d4dc2f1f55e77f4e74d89002eddea3a20
