<<<<<<< HEAD
shiny::runApp()
runApp()
shiny::runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
TasaReemplazo <- function(edad, salario, anios_aporte){
if(salario > 460){incremento <- 0.021540}
else{incremento <- 0.025339 }
pension <- Pension(edad, salario, anios_aporte, incremento)
ultimo_sueldo <- salario * (1+incremento)^(anios_aporte - 1)
tasa <- (pension / ultimo_sueldo) * 100
return(tasa)
}
runApp()
runApp()
inflacion <- 0.02154
Pension(25,850, (65-25), 0.02154)
# Función para calculo de la pensión
Pension <- function(edad, salario, anios_aporte, inflacion){
# Creamos un vector con los últimos 5 mejores salarios
mejores_5_salarios <- sapply(1:5, function(i) {
salario * (1 + inflacion)^(anios_aporte - i)
=======
type = "due")
return(Ahorro)
>>>>>>> 0d176af3e35208d31786a03182fa16db400a57db
})
output$ahorro <- renderText({
paste("El ahorro es:", round(calcularAhorro(),1))
})
output$Naportes <- renderText({
paste("Aportó:", input$edad_jubilacion - input$edad_inicio, "años")
})
# Carga de las tablas de mortalidad
probsH<- unname(unlist(read_excel("Probabilidades_Ecuador_2023_2060.xlsx",
sheet=1)[,c(3)]))
probsM<- unname(unlist(read_excel("Probabilidades_Ecuador_2023_2060.xlsx",
sheet=2)[,c(3)]))
ls("package:lifecontingencies")
TH <- probs2lifetable(probs=probsH, radix=100000, type="qx", name = "Mortalidad Hombres")
TM <- probs2lifetable(probs=probsM, radix=100000, type="qx", name = "Mortalidad Mujeres")
# Cálculo del valor actual de las prestaciones a otorgarse
# Tasa de crecimiento del SBU= 2.5339%
# Tasa de crecimiento de pensiones= 1.8261%
load("C:/Users/MyHP/Desktop/TIC/Shiny-TIC/obtencion_pension_prom.Rdata")
# arreglo base de datos
#establecimiento minimo y maximo de pensiones
pensiones2 <- pensiones2 %>%  mutate( prom_salario_a_usar = promedio_sueldo_real *(1.02154)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=promedio_sueldo_real)
pensiones2 <- pensiones2 %>%  mutate(pension_final1 = pension_final *( 1.018261)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=pension_final)
pensiones2 <- pensiones2 %>% mutate(pensionesfinal2 = pension_final1)
pensiones2 <- pensiones2 %>% dplyr::filter(tipo_seguro != 'SC')
#Función de cálculo de la pensión promedio
pension_promedio_fun <- function(e_j, impo, sexo1, sal_ini, anios_aporte){
crec_salarios <- 0.02154
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 24 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 300 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]]+100)
#-300, -400
prom <- mean(res$pensionesfinal2)
return(prom)
}
calcularVApensiones <- reactive({
sexo <- input$sexo
edad_inicio <- input$edad_inicio
edad_jubilacion <- input$edad_jubilacion
n_pensiones <- 100 - edad_jubilacion # 100 años de edad como límite
anios_aporte <- edad_jubilacion-edad_inicio
crec_pensiones <- 1.8261/100
inflacion <- input$inflacion / 100
interes <- input$interes /100
crec_salarios <- 0.02154
salario <- input$salario *(1+ crec_salarios)^(-input$anio_inicio + (2024 - anios_aporte))
#Cálculo de la pensión promedio
#pension_promedio <- Pension(input$edad_inicio, input$salario, (input$edad_jubilacion - input$edad_inicio))[[1]]
pension_promedio <- pension_promedio_fun(edad_jubilacion, anios_aporte*12, sexo, salario, anios_aporte)
# Calculo del VA de la pension
i_12 <- (1+interes)^(1/12) - 1
C <- pension_promedio* annuity(i = i_12, n=12, type = "due")
if(sexo == 'M'){
va_pension <- C * axn(TH, x= edad_jubilacion, n=n_pensiones, i= (interes-crec_pensiones)/(1+crec_pensiones), payment='due')
}else{
va_pension <- C * axn(TM, x= edad_jubilacion, n=n_pensiones, i= (interes-crec_pensiones)/(1+crec_pensiones), payment='due')
}
<<<<<<< HEAD
Pension(25,850, (65-25), 0.02154)
edad <- 25
salario <- 850
anios_aporte <- (65-25)
inflacion <- 0.02154
pension <- Pension(edad, salario, anios_aporte, inflacion)
pension
ultimo_sueldo <- salario * (1+inflacion)^(anios_aporte - 1)
ultimo_sueldo
tasa <- (pension / ultimo_sueldo) * 100
tasa
tasa
ultimo_sueldo/pension
=======
pension <- pension_promedio
return(list(va_pension, pension))
})
output$VApension <- renderText({
paste("El valor actual actuarial de la pensión a otorgarse es: ", round(calcularVApensiones()[[1]],1))
})
output$cobertura <- renderText({
paste("Porcentaje con el que debe aportar el Estado Ecuatoriano para cubrir el pago de la pensión del individuo: ",
round(((calcularVApensiones()[[1]]- calcularAhorro())/calcularVApensiones()[[1]])*100,1), '%')
})
output$pensionpromedio <- renderText({
paste("La pensión promedio obtenida de la base de datos que recibirían es de: $ ", round(calcularVApensiones()[[2]],1))
})
output$pension_teorica_actual <- renderText({
paste("La pensión teórica que recibiría actualmente sin las reformas es: $",
round(Pension(input$edad_inicio, input$salario *(1+ 0.02154)^(-input$anio_inicio + (2024 - (input$edad_jubilacion - input$edad_inicio))), (input$edad_jubilacion - input$edad_inicio))[[1]], 2)
)
})
output$pension_teorica_jub <- renderText({
paste("La pensión teórica que recibiría al momento de su jubilación sin las reformas es: $",
round(Pension(input$edad_inicio, input$salario , (input$edad_jubilacion - input$edad_inicio))[[1]], 2)
)
})
output$pension_teorica_jub_o <- renderText({
paste("La pensión teórica que recibiría al momento de su jubilación capitalizando la pensión actual obtenida: $",
round((Pension(input$edad_inicio, input$salario *(1+ 0.02154)^(-input$anio_inicio + (2024 - (input$edad_jubilacion - input$edad_inicio))), (input$edad_jubilacion - input$edad_inicio))[[1]])*(1.018261 )^((input$edad_jubilacion-input$edad_inicio)- (2024 - input$anio_inicio)),2)
)
})
output$tasa_reemplazo <- renderText({
paste("La tasa de reemplazo es: ",
round( TasaReemplazo(input$edad_inicio, input$salario, (input$edad_jubilacion - input$edad_inicio)), 2)
)
})
# GRAFICO, CUÁNDO SE PRESENTA EL DÉFICIT DEPENDIENDO DEL APORTE DEL ESTADO DEL 10% AL 40%
# USO DE LA INFORMACIÓN DADA POR LA BASE DE DATOS PROPORCIONADA
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 10/100
i_12 <- (1+(10/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
t <- 1
max_iter <- 100
while((ahorro - pension) > 0 && t <= max_iter){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
t <- t+ 1
}
if (t > max_iter) {
return(100)
} else {
return(i)
}
}
}
output$deficit_porcentaje <- renderHighchart({
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(80123, 123150 ,722 , i))
}
data <- data.frame(
x = seq(0, 40, by = 1),
y = y
)
# Crear gráfico de Highcharts
data %>%
hchart(.,
type = "line",styled = TRUE,
hcaes(x = x,
y = y)) %>%
hc_title(text = "Impacto del Porcentaje de Aportación del Estado en la Sostenibilidad de las Pensiones") %>%
hc_subtitle(text = "Análisis de Tendencias y Proyecciones") %>%
hc_xAxis(title = list(text = "Porcentaje de Aportación del Estado")) %>%
hc_yAxis(title = list(text = "Número de años antes de alcanzar el déficit")) %>%
hc_add_theme(hc_theme_darkunica())
})
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(80123, 123150 ,722 , i))
}
data <- data.frame(
x = seq(0, 40, by = 1),
y = y
)
data
## SERVER ###
server <- function(input, output, session) {
# Verificar mínimo de edad de jubilación
edadmin <- reactive({
return(minimo(input$edad_inicio))
})
output$minjub <- renderText({
paste("La edad mínima de jubilación es:",edadmin() , "años")
})
# Ahorro
calcularAhorro <- reactive({
edad_inicio <- input$edad_inicio
inflacion <- input$inflacion / 100
interes <- input$interes /100
edad_jubilacion <- input$edad_jubilacion
anios_aporte <- edad_jubilacion-edad_inicio
IVM <- 0.1106
crec_salarios <- 0.02154
salario0 <- input$salario *(1+ crec_salarios)^(-input$anio_inicio + (2024 - anios_aporte))
# Calculo del ahorro de un afiliado hasta su jubilación
i_12 <- (1+interes)^(1/12) - 1
Ahorro <- VSn(C = (salario0 * IVM) * annuity(i = i_12, n=12, type = "due"),
q = (1+crec_salarios) ,
n = anios_aporte,
i = interes,
type = "due")
return(Ahorro)
})
output$ahorro <- renderText({
paste("El ahorro es:", round(calcularAhorro(),1))
})
output$Naportes <- renderText({
paste("Aportó:", input$edad_jubilacion - input$edad_inicio, "años")
})
# Carga de las tablas de mortalidad
probsH<- unname(unlist(read_excel("Probabilidades_Ecuador_2023_2060.xlsx",
sheet=1)[,c(3)]))
probsM<- unname(unlist(read_excel("Probabilidades_Ecuador_2023_2060.xlsx",
sheet=2)[,c(3)]))
ls("package:lifecontingencies")
TH <- probs2lifetable(probs=probsH, radix=100000, type="qx", name = "Mortalidad Hombres")
TM <- probs2lifetable(probs=probsM, radix=100000, type="qx", name = "Mortalidad Mujeres")
# Cálculo del valor actual de las prestaciones a otorgarse
# Tasa de crecimiento del SBU= 2.5339%
# Tasa de crecimiento de pensiones= 1.8261%
load("C:/Users/MyHP/Desktop/TIC/Shiny-TIC/obtencion_pension_prom.Rdata")
# arreglo base de datos
#establecimiento minimo y maximo de pensiones
pensiones2 <- pensiones2 %>%  mutate( prom_salario_a_usar = promedio_sueldo_real *(1.02154)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=promedio_sueldo_real)
pensiones2 <- pensiones2 %>%  mutate(pension_final1 = pension_final *( 1.018261)^(2024 - as.numeric(format(as.Date(fecha_inicial_pension, '%Y %m %d'), "%Y"))), .before=pension_final)
pensiones2 <- pensiones2 %>% mutate(pensionesfinal2 = pension_final1)
pensiones2 <- pensiones2 %>% dplyr::filter(tipo_seguro != 'SC')
#Función de cálculo de la pensión promedio
pension_promedio_fun <- function(e_j, impo, sexo1, sal_ini, anios_aporte){
crec_salarios <- 0.02154
res <- pensiones2 %>%  dplyr::filter(minimo(input$edad_inicio) <=edad_jubilacion & edad_jubilacion <= e_j + 3) %>%
dplyr::filter(impo + 24 >= numero_imposiciones &  numero_imposiciones >= ((minimo(input$edad_inicio) - input$edad_inicio)*12) ) %>%
dplyr::filter(sexo == sexo1) %>%
mutate(prom_salario_a_usar1 = ifelse(prom_salario_a_usar ==0, mean(pensiones2$prom_salario_a_usar[pensiones2$prom_salario_a_usar !=0]),prom_salario_a_usar)) %>%
dplyr::filter( Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]] - 300 <= prom_salario_a_usar1 & prom_salario_a_usar1 <= Pension(input$edad_inicio, sal_ini, anios_aporte)[[2]]+100)
#-300, -400
prom <- mean(res$pensionesfinal2)
return(prom)
}
calcularVApensiones <- reactive({
sexo <- input$sexo
edad_inicio <- input$edad_inicio
edad_jubilacion <- input$edad_jubilacion
n_pensiones <- 100 - edad_jubilacion # 100 años de edad como límite
anios_aporte <- edad_jubilacion-edad_inicio
crec_pensiones <- 1.8261/100
inflacion <- input$inflacion / 100
interes <- input$interes /100
crec_salarios <- 0.02154
salario <- input$salario *(1+ crec_salarios)^(-input$anio_inicio + (2024 - anios_aporte))
#Cálculo de la pensión promedio
#pension_promedio <- Pension(input$edad_inicio, input$salario, (input$edad_jubilacion - input$edad_inicio))[[1]]
pension_promedio <- pension_promedio_fun(edad_jubilacion, anios_aporte*12, sexo, salario, anios_aporte)
# Calculo del VA de la pension
i_12 <- (1+interes)^(1/12) - 1
C <- pension_promedio* annuity(i = i_12, n=12, type = "due")
if(sexo == 'M'){
va_pension <- C * axn(TH, x= edad_jubilacion, n=n_pensiones, i= (interes-crec_pensiones)/(1+crec_pensiones), payment='due')
}else{
va_pension <- C * axn(TM, x= edad_jubilacion, n=n_pensiones, i= (interes-crec_pensiones)/(1+crec_pensiones), payment='due')
}
pension <- pension_promedio
return(list(va_pension, pension))
})
output$VApension <- renderText({
paste("El valor actual actuarial de la pensión a otorgarse es: ", round(calcularVApensiones()[[1]],1))
})
output$cobertura <- renderText({
paste("Porcentaje con el que debe aportar el Estado Ecuatoriano para cubrir el pago de la pensión del individuo: ",
round(((calcularVApensiones()[[1]]- calcularAhorro())/calcularVApensiones()[[1]])*100,1), '%')
})
output$pensionpromedio <- renderText({
paste("La pensión promedio obtenida de la base de datos que recibirían es de: $ ", round(calcularVApensiones()[[2]],1))
})
output$pension_teorica_actual <- renderText({
paste("La pensión teórica que recibiría actualmente sin las reformas es: $",
round(Pension(input$edad_inicio, input$salario *(1+ 0.02154)^(-input$anio_inicio + (2024 - (input$edad_jubilacion - input$edad_inicio))), (input$edad_jubilacion - input$edad_inicio))[[1]], 2)
)
})
output$pension_teorica_jub <- renderText({
paste("La pensión teórica que recibiría al momento de su jubilación sin las reformas es: $",
round(Pension(input$edad_inicio, input$salario , (input$edad_jubilacion - input$edad_inicio))[[1]], 2)
)
})
output$pension_teorica_jub_o <- renderText({
paste("La pensión teórica que recibiría al momento de su jubilación capitalizando la pensión actual obtenida: $",
round((Pension(input$edad_inicio, input$salario *(1+ 0.02154)^(-input$anio_inicio + (2024 - (input$edad_jubilacion - input$edad_inicio))), (input$edad_jubilacion - input$edad_inicio))[[1]])*(1.018261 )^((input$edad_jubilacion-input$edad_inicio)- (2024 - input$anio_inicio)),2)
)
})
output$tasa_reemplazo <- renderText({
paste("La tasa de reemplazo es: ",
round( TasaReemplazo(input$edad_inicio, input$salario, (input$edad_jubilacion - input$edad_inicio)), 2)
)
})
# GRAFICO, CUÁNDO SE PRESENTA EL DÉFICIT DEPENDIENDO DEL APORTE DEL ESTADO DEL 10% AL 40%
# USO DE LA INFORMACIÓN DADA POR LA BASE DE DATOS PROPORCIONADA
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 10/100
i_12 <- (1+(10/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
t <- 1
max_iter <- 100
while((ahorro - pension) > 0 && t <= max_iter){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
t <- t+ 1
}
if (t > max_iter) {
return(100)
} else {
return(i)
}
}
}
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 10/100
i_12 <- (1+(10/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0 && t <= max_iter){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 10/100
i_12 <- (1+(10/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
y
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 6.25/100
i_12 <- (1+(6.25/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
y
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 6.25/100
i_12 <- (1+(6.25/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (!is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (i in 0:40){
y <- c
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
y
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 6.25/100
i_12 <- (1+(6.25/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (!is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (i in 0:40){
y <- c(y , fun_anio_deficit(8110123, 123150 ,722 , i))
}
y
if(is.finite(100)){print(199)}
if(!is.finite(100)){print(199)}
y <- c()
for (k in 0:40){
y <- c(y , fun_anio_deficit(80123, 123150 ,722 , k))
}
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 6.25/100
i_12 <- (1+(6.25/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (!is.finite(ahorro)) {
return(100)
}
}
return(i)
}
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 6.25/100
i_12 <- (1+(6.25/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (!is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
for (k in 0:40){
y <- c(y , fun_anio_deficit(80123, 123150 ,722 , k))
}
y
fun_anio_deficit<- function (ahorro, va_pensiones, pension_inicial, porcentaje_estado){
ahorro <- ahorro + (porcentaje_estado/100)* va_pensiones
crec_pensiones <- 1.8261/100
interes <- 10/100
i_12 <- (1+(10/100))^(1/12) - 1
pension <- pension_inicial * annuity(i = i_12, n=12, type = "due")
i <- 1
while((ahorro - pension) > 0){
ahorro <- (ahorro - pension)* (1 + interes)
pension <- pension * (1+ crec_pensiones)
i <- i + 1
if (!is.finite(ahorro)) {
return(100)
}
}
return(i)
}
y <- c()
y <- c()
for (k in 0:40){
y <- c(y , fun_anio_deficit(80123, 123150 ,722 , k))
}
y
runApp()
# Crear gráfico de Highcharts
data %>%
hchart(.,
type = "line",styled = TRUE,
name= 'Edad del jubilado',
hcaes(x = x,
y = y)) %>%
hc_title(text = "Impacto del Porcentaje de Aportación del Estado en la Sostenibilidad de las Pensiones") %>%
hc_subtitle(text = "Edad del jubilado donde se terminarían los recursos para el pago de su pensión según el porcentaje de aporte del Estado") %>%
hc_xAxis(title = list(text = "Porcentaje de Aportación del Estado")) %>%
hc_yAxis(title = list(text = "Edad del jubilado donde se alcanza el déficit")) %>%
hc_add_theme(hc_theme_elementary())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 0d176af3e35208d31786a03182fa16db400a57db
runApp()
shiny::runApp()
